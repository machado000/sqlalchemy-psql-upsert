name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Configure Poetry
      run: |
        poetry config installer.max-workers 1
        poetry config installer.no-binary greenlet
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-v2
    
    - name: Install dependencies
      run: |
        poetry lock --no-cache
        poetry install --with dev --no-cache || {
          echo "Poetry install failed, trying with pip fallback for greenlet"
          poetry run pip install --no-binary greenlet greenlet
          poetry install --with dev --no-cache
        }
      env:
        PIP_NO_BINARY: greenlet
    
    - name: Run type checking with mypy
      run: poetry run mypy sqlalchemy_psql_upsert/
    
    - name: Run tests with pytest
      run: poetry run pytest -v --tb=short
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: test_db
      
    - name: Check code compiles
      run: poetry run python -m py_compile sqlalchemy_psql_upsert/*.py
